apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.name" . }}
  labels:
    {{- include "app.labels" $ | nindent 4 }}
  {{- with .Values.additionalAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "app.selectorLabels" $ | nindent 6 }}
  # NCC only supports single replica for now
  replicas: 1
  # The deployment strategy is hardcoded as well until NCC supports HA mode
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "app.labels" $ | nindent 8 }}
      {{- with .Values.additionalAnnotations }}
      annotations:
        deployment/date: {{ now }} # Force redeployment
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: ncc
          args:
            - "--shards-cfg"
            - {{ .Values.controller.shardsConfigPath }}
            - "--alias"
            - {{ .Values.controller.alias }}
            - "--namespace"
            - {{ .Values.controller.namespace | quote }}
            - "--workers"
            - {{ .Values.controller.workers | quote }}
            - "--v"
            - "4"
            - "--failure-rate-base-delay"
            - {{ .Values.controller.backOffBaseDelay | quote }}
            - "--failure-rate-max-delay"
            - {{ .Values.controller.backOffMaxDelay | quote }}
            - "--rate-limit-per-second"
            - {{ .Values.controller.rateLimitElementsPerSecond | quote }}
            - "--rate-limit-burst"
            - {{ .Values.controller.rateLimitElementsBurst | quote}}
        {{- with .Values.securityContext }}
          securityContext:
          {{- toYaml . | nindent 12 }}
        {{- end }}
          image: "{{ include "app.image" . }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          env:
            - name: APPLICATION_VERSION
              value: "{{ (default (printf "v%s" .Chart.AppVersion) .Values.image.tag) }}"
          {{- if .Values.controller.datadog.enabled }}
            - name: DATADOG__API_KEY
              value: {{ .Values.controller.datadog.apiKey | quote }}
            - name: DATADOG__ENDPOINT
              value: {{ .Values.controller.datadog.endpoint | quote }}
            - name: DATADOG__APPLICATION_HOST
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DATADOG__SERVICE_NAME
              value: {{ .Values.controller.datadog.serviceName }}
          {{- end }}
          {{- with .Values.extraEnv }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- if .Values.extraEnvFrom }}
          envFrom:
          {{- with .Values.extraEnvFrom }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
          volumeMounts:
          - name: shards-kube-config
            mountPath: {{ .Values.controller.shardsConfigPath }}
          {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- with .Values.resources }}
          resources:
          {{- toYaml . | nindent 12 }}
        {{- end }}
      volumes:
        - name: shards-kube-config
          secret:
            secretName: {{ .Values.controller.shardsConfigSecretName }}
          {{- with .Values.extraVolumes }}
            {{- toYaml . | nindent 8 }}
          {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}